import java_cup.runtime.*;


parser code {:

    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};



terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN,DOT;
terminal Integer   NUMBER, ID;
terminal           SATAN, a,b,c,d,e;

non terminal Object     expr_list, expr_part, S, C, A,B ,D,E,F;
non terminal Integer    expr, factor, term;


  /*S ::= A a
      |d A b
      |d c a
      |c b;

  A ::= c;*/

//La gramatica de la clase
  S ::= C C;

  C ::= c C
    |d;


//Ejemplo de http://smlweb.cpsc.ucalgary.ca/lr1.php?grammar=E+-%3E+d+D+%7C+D+%7C+F.%0AF+-%3E+e+C+%7C+C.%0AD+-%3E+d+e+B+b+%7C+e+A+c.%0AC+-%3E+e+d+B+c+%7C+d+A+b.%0AB+-%3E+a.%0AA+-%3E+a.%0A&substs=
/* E ::= d D
 |	D
 |	F;

 F ::=	e C
 |	C;

 D ::=	d e B b
 |	e A c;

 C ::=	e d B c
 |	d A b;

 B ::=	a;

 A ::=	a; */

 //Ejemplo http://smlweb.cpsc.ucalgary.ca/vital-stats.php?grammarfile=example-grammars/ll1-lr1-0.cfg

/* S ::=	a A
 |	b B;

 A ::=	C a
 |	D b;

 B ::=	C b
 |	D a;

 C ::=	E;

 D ::=	E;

 E ::=	; */


// El que est√° de ejemplo en javacup site
 /*  expr_list ::= expr_list expr_part
                 |expr_part;


   expr_part ::= expr:e SEMI {: System.out.println(e); :}
                 ;


   expr      ::= expr:e PLUS factor:f
                 {: RESULT = e + f; :}
                 |
                 expr:e MINUS factor:f
                 {: RESULT = e - f; :}
                 |
                 factor:f
                 {: RESULT = f; :}
                 ;


   factor    ::= factor:f TIMES term:t
                 {: RESULT = f * t; :}
                 |
                 factor:f DIVIDE term:t
                 {: RESULT = f / t; :}
                 |
                 term:t
                 {: RESULT = t; :}
                 ;


   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = n; :}
                 |
                 ID:i
                 {: RESULT = 0; :}
                 ; */
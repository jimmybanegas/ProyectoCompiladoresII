import java.util.*;


parser code {:
    public Hashtable<String, Object> variables
        = new Hashtable<String, Object>();
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};



terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal Integer   NUMBER;
terminal String    STRING;
terminal           EQUALS, PRINT;
terminal String    ID;


non terminal Object     expr_list, expr_part;
non terminal Object    expr, factor, term;


   expr_list ::= expr_list expr_part
                 |expr_part;


   expr_part ::= PRINT expr:e SEMI
                {: System.out.println(e); :}
                |
                ID:i EQUALS expr:e SEMI
                {: variables.put(i, e); :}
                 ;

   expr      ::= expr:e PLUS factor:f
                   {: RESULT = (int)e + (int)f; :}
                 |
                 expr:e MINUS factor:f
                 {: RESULT = (int)e - (int)f; :}
                 |
                 factor:f
                 {: RESULT =  f; :}
                 ;


   factor    ::= factor:f TIMES term:t
                 {: RESULT = (int)f * (int)t; :}
                 |
                     factor:f DIVIDE term:t
                   {: RESULT = (int)f / (int)t; :}
                 |
                     term:t
                     {: RESULT = t; :}
                 ;


   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = n; :}
                 |
                 ID:i
                 {: RESULT = variables.get(i); :}
                 |
                 STRING:s
                 {: RESULT = s; :}
                 ;
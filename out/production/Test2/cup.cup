import java.util.*;
import java_cup.runtime.*;
import Tree.*;

parser code {:

    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal        NON, NONTERMINAL, TERMINAL, ASSIGNATION ,SEMI, COMMA, PIPE, COLON ;
terminal String ID;

non terminal Statements listOfstatements;
non terminal StatementNode statement;
non terminal ArrayList<String> symbols_list,productions_list,optional_productions_list;
non terminal String symbol_type;

    listOfstatements ::= listOfstatements:es statement:e
                    {: es.Statements.add(e); RESULT = es;    :}
                    |
                    {: RESULT = new Statements();:}
                    ;

    statement ::= NONTERMINAL symbol_type:type symbols_list:l SEMI
                 {: RESULT = new SymbolDeclarationNode("NONTERMINAL",type,l);:}
                 |
                 NON TERMINAL symbol_type:type symbols_list:l SEMI
                      {: RESULT = new SymbolDeclarationNode("NONTERMINAL",type,l);:}
                      |
                 TERMINAL symbol_type:type symbols_list:l SEMI
                    {: RESULT = new SymbolDeclarationNode("TERMINAL",type,l);:}
                 |
                 NONTERMINAL symbols_list:l SEMI
                      {: RESULT = new SymbolDeclarationNode("NONTERMINAL","Object",l);:}
                 |
                 NON TERMINAL symbols_list:l SEMI
                           {: RESULT = new SymbolDeclarationNode("NONTERMINAL","Object",l);:}
                 |
                 TERMINAL symbols_list:l SEMI
                      {: RESULT = new SymbolDeclarationNode("TERMINAL","Object",l);:}
                 |
                 ID:i ASSIGNATION productions_list:l optional_productions_list:le SEMI
                        {: ArrayList<ArrayList<String>> productions = new ArrayList<>();
                         productions.add(l);
                         productions.add(le);

                         RESULT = new ProductionNode(i, productions); :}
                 ;

    symbols_list ::= symbols_list:li COMMA ID:i
                {: RESULT = new ArrayList<>();
                    RESULT.addAll((Collection)li);
                    RESULT.add(i); :}
                |
                ID:i
                {: RESULT = new ArrayList<>(Arrays.asList(i)); :}
                ;

    symbol_type ::= ID:i
                    {: RESULT = i;  :}
                   ;

    productions_list ::= productions_list:li ID:e
                        {: RESULT = new ArrayList<>();
                          RESULT.addAll(li);
                          RESULT.add(e);:}
                    | productions_list:li ID:e COLON ID:label
                       {: RESULT = new ArrayList<>();
                         RESULT.addAll(li);
                         RESULT.add(e +":"+ label);:}
                    |
                    ID:i
                        {: RESULT = new ArrayList<>();
                          RESULT.add(i);:}
                    |
                    ID:i COLON ID:label
                        {: RESULT = new ArrayList<>();
                          RESULT.add(i + ":"+ label);:}
                         ;

    optional_productions_list ::= optional_productions_list:li PIPE productions_list:le
                             {: RESULT = new ArrayList<>();

                               if(li != null){
                                  le.addAll(li);
                               }
                               RESULT.addAll((Collection)le);
                             :}
                              |
                              {:RESULT = new ArrayList<>(); :}
                              ;






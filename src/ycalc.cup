// CUP specification for a simple expression evaluator (w/ actions)

package java_cup.runtime.dos.tres;

import java_cup.runtime.Math.Otro.*;

/* Preliminaries to set up and use the scanner.  */
init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */

terminal Integer   NUMBER;

/* Non-terminals */
non terminal            expr_list, expr_part;
non terminal Integer    expr;

/* Precedences */
precedence left PLUS, MINUS;
precedence right TIMES, DIVIDE, MOD;
precedence nonassoc UMINUS;

/* The grammar */

expr      ::= expr:e1 PLUS expr:e2   {: RESULT = new Integer(e1.intValue() + e2.intValue()); :}
	      | expr:e1 MINUS expr:e2  {: RESULT = new Integer(e1.intValue() - e2.intValue()); :}
	      | expr:e1 TIMES expr:e2  {: RESULT = new Integer(e1.intValue() * e2.intValue()); :}
	      | expr:e1 DIVIDE expr:e2 {: RESULT = new Integer(e1.intValue() / e2.intValue()); :}
	      | expr:e1 MOD expr:e2  {: RESULT = new Integer(e1.intValue() % e2.intValue()); :}
	      | NUMBER:n    {: RESULT = n; :}
	      | MINUS expr:e  {: RESULT = new Integer(0 - e.intValue()); :}  %prec UMINUS
	      | LPAREN expr:e RPAREN {: RESULT = e; :}
	      ;